name: Main Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-start:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Create .env for Docker Compose
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "PGHOST=${{ secrets.PGHOST }}" >> .env
          echo "PGPORT=${{ secrets.PGPORT }}" >> .env
          echo "PGUSER=${{ secrets.PGUSER }}" >> .env
          echo "PGPASSWORD=${{ secrets.PGPASSWORD }}" >> .env
          echo "PGDATABASE=${{ secrets.PGDATABASE }}" >> .env

      - name: Build Docker Images
        run: docker compose build
        env:
          TELERIK_LICENSE: ${{ secrets.TELERIK_LICENSE }}

      - name: Start Docker Containers
        run: docker compose up -d

      - name: Check Running Containers
        run: docker ps

      - name: Wait for Backend to be Ready (Health Check)
        run: |
          for i in {1..20}; do
            if curl -s http://localhost:3000/health; then
              echo "Server is ready!"
              break
            fi
            echo "Waiting for server..."
            sleep 3
          done

      - name: Wait for Frontend to be Ready
        run: |
          for i in {1..20}; do
            if curl -s http://localhost:8080 | grep "<title>"; then
              echo "Frontend is ready!"
              break
            fi
            echo "Waiting for frontend..."
            sleep 3
          done


  e2e-tests:
    runs-on: ubuntu-latest
    needs: build-and-start

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Cypress Dependencies and Run E2E Tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: angular-client
        env:
          CI: true

      - name: Shut Down Docker Containers
        if: always()
        run: docker compose down
